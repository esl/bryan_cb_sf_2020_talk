
```

iex(4)> cc_num_hash = :crypto.hash(:sha256,"5105105105105100") |> Base.encode64
"MElF6R3j3v9Sph0IczFB1y3ULsnUeXLxBgU01UwMf5A="
iex(5)> pp_num_hash = :crypto.hash(:sha256,"970478931") |> Base.encode64
"KsU2vfI2wLbam/sdsDnuCUMW+O8if7bkvPInJ46U2V8="

input = %{
  name: "davey",
  surname: "jones",
  cc_hash: cc_num_hash,
  pp_hash: pp_num_hash,
  flight_number: "flight_number",
  minute: "minute",
  hour: "hour",
  day: "day",
  month: "month",
  year: "year"
}
%{
  cc_hash: "MElF6R3j3v9Sph0IczFB1y3ULsnUeXLxBgU01UwMf5A=",
  day: "day",
  flight_number: "flight_number",
  hour: "hour",
  minute: "minute",
  month: "month",
  name: "davey",
  pp_hash: "KsU2vfI2wLbam/sdsDnuCUMW+O8if7bkvPInJ46U2V8=",
  surname: "jones",
  year: "year"
}


iex(12)> valid_changeset = %Ecto.Changeset{valid?: true} = Chat.Flight.Booking.changeset(%Chat.Flight.Booking{}, input)
#Ecto.Changeset<
  action: nil,
  changes: %{
    cc_hash: "MElF6R3j3v9Sph0IczFB1y3ULsnUeXLxBgU01UwMf5A=",
    day: "day",
    entity_hash: "PyfweS0UmHn/7vKJZhHuuFN9oqXNoh9hWyZ5axOjnLA=",
    flight_number: "flight_number",
    hour: "hour",
    minute: "minute",
    month: "month",
    name: "davey",
    pp_hash: "KsU2vfI2wLbam/sdsDnuCUMW+O8if7bkvPInJ46U2V8=",
    surname: "jones",
    year: "year"
  },
  errors: [],
  data: #Chat.Flight.Booking<>,
  valid?: true
>


  iex(13)> Chat.Repo.insert(valid_changeset)
[debug] QUERY OK db=4.3ms decode=1.1ms queue=3.3ms idle=9871.8ms
INSERT INTO "flight_bookings" ("cc_hash","day","entity_hash","flight_number","hour","minute","month","name","pp_hash","surname","year","inserted_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING "id" ["MElF6R3j3v9Sph0IczFB1y3ULsnUeXLxBgU01UwMf5A=", "day", "PyfweS0UmHn/7vKJZhHuuFN9oqXNoh9hWyZ5axOjnLA=", "flight_number", "hour", "minute", "month", "davey", "KsU2vfI2wLbam/sdsDnuCUMW+O8if7bkvPInJ46U2V8=", "jones", "year", ~N[2020-02-29 09:31:54], ~N[2020-02-29 09:31:54]]
{:ok,
 %Chat.Flight.Booking{
   __meta__: #Ecto.Schema.Metadata<:loaded, "flight_bookings">,
   cc_hash: "MElF6R3j3v9Sph0IczFB1y3ULsnUeXLxBgU01UwMf5A=",
   day: "day",
   entity_hash: "PyfweS0UmHn/7vKJZhHuuFN9oqXNoh9hWyZ5axOjnLA=",
   flight_number: "flight_number",
   hour: "hour",
   id: 1,
   inserted_at: ~N[2020-02-29 09:31:54],
   minute: "minute",
   month: "month",
   name: "davey",
   pp_hash: "KsU2vfI2wLbam/sdsDnuCUMW+O8if7bkvPInJ46U2V8=",
   surname: "jones",
   updated_at: ~N[2020-02-29 09:31:54],
   year: "year"
 }}
iex(14)> Chat.Repo.insert(valid_changeset)
[debug] QUERY ERROR db=6.3ms queue=2.4ms idle=9600.5ms
INSERT INTO "flight_bookings" ("cc_hash","day","entity_hash","flight_number","hour","minute","month","name","pp_hash","surname","year","inserted_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING "id" ["MElF6R3j3v9Sph0IczFB1y3ULsnUeXLxBgU01UwMf5A=", "day", "PyfweS0UmHn/7vKJZhHuuFN9oqXNoh9hWyZ5axOjnLA=", "flight_number", "hour", "minute", "month", "davey", "KsU2vfI2wLbam/sdsDnuCUMW+O8if7bkvPInJ46U2V8=", "jones", "year", ~N[2020-02-29 09:31:55], ~N[2020-02-29 09:31:55]]
{:error,
 #Ecto.Changeset<
   action: :insert,
   changes: %{
     cc_hash: "MElF6R3j3v9Sph0IczFB1y3ULsnUeXLxBgU01UwMf5A=",
     day: "day",
     entity_hash: "PyfweS0UmHn/7vKJZhHuuFN9oqXNoh9hWyZ5axOjnLA=",
     flight_number: "flight_number",
     hour: "hour",
     minute: "minute",
     month: "month",
     name: "davey",
     pp_hash: "KsU2vfI2wLbam/sdsDnuCUMW+O8if7bkvPInJ46U2V8=",
     surname: "jones",
     year: "year"
   },
   errors: [
     unique_booking_constraint: {"has already been taken",
      [constraint: :unique, constraint_name: "unique_traveller_index"]}
   ],
   data: #Chat.Flight.Booking<>,
   valid?: false
 >}

----




```
defmodule Bookings do
  @moduledoc """
  The Polls context.
  """

  import Ecto.Query, warn: false
  alias Chat.Repo

  alias Chat.Flight.Booking

  def insert_booking_with_retry(
        %{
          name: _, surname: _, cc_hash: _, pp_hash: _, 
          flight_number: _, minute: _, hour: _,
          day: _, month: _, year: _ } = booking
      ) do
    use Retry

    retry with: linear_backoff(500, 1), atoms: [], rescue_only: [DBConnection.ConnectionError] |> Enum.take(10) do
      IO.puts("attempting to insert changeset - #{DateTime.utc_now}")
      changeset = Chat.Flight.Booking.changeset(%Chat.Flight.Booking{}, booking)
      Repo.insert(changeset)
    after
      result -> result
    else
      error -> error
    end
  end
end
```


Kill the database instance 

```

iex(7)> Bookings.insert_booking_with_retry(input) [error] Postgrex.Protocol (#PID<0.383.0>) failed to connect: ** (DBConnection.ConnectionError) tcp connect (localhost:5432): connection refused - :econnrefused
 
attempting to insert changeset - 2020-02-29 11:21:37.528090Z
[error] Postgrex.Protocol (#PID<0.391.0>) failed to connect: ** (DBConnection.ConnectionError) tcp connect (localhost:5432): connection refused - :econnrefused
[debug] QUERY ERROR queue=2466.3ms
INSERT INTO "flight_bookings" ("cc_hash","day","entity_hash","flight_number","hour","minute","month","name","pp_hash","surname","year","inserted_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING "id" ["cc_hash", "day", "FuQvx1zglxDVIoBMpucbDi+iy1pmDDsCUEZAtWGEUqI=", "flight_number", "hour", "minute", "month", "davey", "pp_hash", "jones", "year", ~N[2020-02-29 11:21:37], ~N[2020-02-29 11:21:37]]
attempting to insert changeset - 2020-02-29 11:21:40.495919Z
[error] Postgrex.Protocol (#PID<0.384.0>) failed to connect: ** (DBConnection.ConnectionError) tcp connect (localhost:5432): connection refused - :econnrefused
[debug] QUERY ERROR queue=1498.8ms
............
INSERT INTO "flight_bookings" ("cc_hash","day","entity_hash","flight_number","hour","minute","month","name","pp_hash","surname","year","inserted_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING "id" ["cc_hash", "day", "FuQvx1zglxDVIoBMpucbDi+iy1pmDDsCUEZAtWGEUqI=", "flight_number", "hour", "minute", "month", "davey", "pp_hash", "jones", "year", ~N[2020-02-29 11:21:52], ~N[2020-02-29 11:21:52]]
{:error,
 #Ecto.Changeset<
   action: :insert,
   changes: %{
     cc_hash: "cc_hash",
     day: "day",
     entity_hash: "FuQvx1zglxDVIoBMpucbDi+iy1pmDDsCUEZAtWGEUqI=",
     flight_number: "flight_number",
     hour: "hour",
     minute: "minute",
     month: "month",
     name: "davey",
     pp_hash: "pp_hash",
     surname: "jones",
     year: "year"
   },
   errors: [
     unique_booking_constraint: {"has already been taken",
      [constraint: :unique, constraint_name: "unique_traveller_index"]}


----


```
   ],
   data: #Chat.Flight.Booking<>,
   valid?: false
 >}


```
input = %{input | name: "todd"}


iex(9)> input = %{input | name: "todd"}
%{
  cc_hash: "cc_hash",
  day: "day",
  flight_number: "flight_number",
  hour: "hour",
  minute: "minute",
  month: "month",
  name: "todd",
  pp_hash: "pp_hash",
  surname: "jones",
  year: "year"
}
iex(10)> Bookings.insert_booking_with_retry(input) 
attempting to insert changeset - 2020-02-29 11:25:11.295973Z
[debug] QUERY OK db=2.4ms queue=1.8ms idle=9300.1ms
INSERT INTO "flight_bookings" ("cc_hash","day","entity_hash","flight_number","hour","minute","month","name","pp_hash","surname","year","inserted_at","updated_at") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13) RETURNING "id" ["cc_hash", "day", "oM592T6U8heG3jw6Ku08z+OswrQ6csbuF1uqFK1vbrU=", "flight_number", "hour", "minute", "month", "todd", "pp_hash", "jones", "year", ~N[2020-02-29 11:25:11], ~N[2020-02-29 11:25:11]]
{:ok,
 %Chat.Flight.Booking{
   __meta__: #Ecto.Schema.Metadata<:loaded, "flight_bookings">,
   cc_hash: "cc_hash",
   day: "day",
   entity_hash: "oM592T6U8heG3jw6Ku08z+OswrQ6csbuF1uqFK1vbrU=",
   flight_number: "flight_number",
   hour: "hour",
   id: 132,
   inserted_at: ~N[2020-02-29 11:25:11],
   minute: "minute",
   month: "month",
   name: "todd",
   pp_hash: "pp_hash",
   surname: "jones",
   updated_at: ~N[2020-02-29 11:25:11],
   year: "year"
 }}


----


input = %{ name: "davey", surname: "jones", cc_hash: "cc_num_hash", pp_hash: "pp_num_hash", flight_number: "flight_number", minute: "minute", hour: "hour", day: "day", month: "month", year: "year" }

Bookings.insert_booking_with_retry(input) 


